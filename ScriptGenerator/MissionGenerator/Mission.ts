//can one have more than one ship in a mission> (The big contract)
//- */x (merge with prop?) 
//A chat system similar to the one in game to build it would be nice (with popout */cogwheel) and a ship builder too
//(:o colors based upon character color??)
// revrender needs forward & back button
//not hard code version into the html?
//move requirements above the parts options?
//add a loader for js once its done like in game.
//custom buttons for forward & backward in conversation
//settings audio stuff

//export stuff as files to be used in a mod folder
//export character in character creator to the mod tool?


//hold the phone, my mini sprites are... out of date?

//export (review? dump?)

//delete current
//insert new here
//edit existing export (file only? only work on verify?)
//don't run blank ones on export
//who cares
//autoselect type on new panel

//why arent double spaces showing?
//remove the text input overlay and make it just work with editable elements

//wog
//grab element by id and style inner elements instead of all having their own id
//click and change?

//save file exporter?
//missing external files should not corrupt the save in any caliber. Back-up saves will also be made regularly
//While I can escape/catch the issue, I might just want to either fix the reader or disable it in the save.

//Let the modded game be able to have any pre-existing asset be overwritten by external ones, and default back if those are gone.
//This would be cool for like retexturing assets.
//Maybe even down the line allow some featuresets of objects be brand new concepts not in the game or have script loaders for advanced mods?
//Though number one priority is stability and steam functionality, as currently modifications can ruin a save for example, so I need a lot of escape clauses and value overrides, storage or removals.
//Create a mod folder if it doesn't exist???? With some "place_mod_files_here" files etc
//(are all modfiles .json? .pack? .SHI-t files? (or less vulgar ones, like .SHI-p or .MODCat etc.))
//sadly, A lot of stuff is' le shite' so even with a lot finished, I feel obligated to not release the final build, though I probably will.
//as I don't know what I'm doing, I am unaware of what boatload of security risks I'm bringing to the devs 

//as not-unique missions are generated by a seed value between 0 & 1, I could make a menu where you can play a mission from a seed.
//could funnily share missions with one another like that. Maybe even display seed name in a non-unique mission?? (automatic) Text (string in box) to seed converter as well? Would be dope in the mod menu
//mod in a feature that auto skips text and changes text speed for that line.


let chapterArray = []; //nevermind, apparently this checks if you've completed a certain mission to unlock this one. either default to final (not post game) mission or none at all.


const propertyListUsedInGame:any[] = [];
let uniqueState = !0;


var preDialogueCurrent = 0;
var preDialogueStrings = [""];
(document.getElementById("preCurrentAmountDialogue") as HTMLElement).innerText = preDialogueStrings.length.toString();
(document.getElementById("preCurrentDialoge") as HTMLElement).innerText = (preDialogueCurrent + 1).toString();





let songlist = ["arrival","lagrange","haze","breakbeat","positron","floating","koyo","azure","ending","credits","cobaltcore"];
let currentsong = 0;


let clientList = ["selene","wren","grandma","soggins","meercat","cat","cat2","outlaw","scientist","axel","aaron","rat","amongus","futureSelene","garbogirl","lilibri","dummycharacter"];
//get real names from the Json.
let currentclient = 0;






function pog () {
  (document.getElementById("previewContractName") as HTMLElement).innerText = ((document.getElementById("contractname") as HTMLInputElement).value !== "") ? (document.getElementById("contractname") as HTMLInputElement).value: "contractname";
};
pog();





let prebox = (document.getElementById("prebox") as HTMLInputElement);

let preboxrender = (document.getElementById("preboxrender") as HTMLElement);

function pog2 () {
  console.log(prebox.value);
  preBoxMultiples(prebox);
  preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
};
pog2();





function pog3 () {
  console.log((document.getElementById("postbox") as HTMLInputElement).value);
  (document.getElementById("postboxrender") as HTMLElement).innerText = ((document.getElementById("postbox") as HTMLInputElement).value !== "") ? (document.getElementById("postbox") as HTMLInputElement).value : "This is some placeholder text! You can change it!";
};
pog3();






function selectbutton (this: any) {
  for (let i = 0; i < document.getElementsByClassName("ui-button").length; i++) {
    document.getElementsByClassName("ui-button")[i].setAttribute("class","ui-button");
  };


console.log(document.querySelectorAll(`[active]`).length)

  for (let i = 0; i < (document.querySelectorAll(`[active]`).length as any); i++) {
    (document.querySelectorAll(`[active]`) as any)[i].setAttribute("active","false");
  }

    this.setAttribute("class","ui-button ui-button-selected");

    if (document.getElementById(`editor-ui-${this.getAttribute("name")}`) !== null) {
      (document.getElementById(`editor-ui-${this.getAttribute("name")}`) as HTMLElement).setAttribute("active","true");
    };
    if (document.getElementById(`display-preview-${this.getAttribute("name")}`) !== null) {
      (document.getElementById(`display-preview-${this.getAttribute("name")}`) as HTMLElement).setAttribute("active","true");
    };

};



function exportQuery() {

const clipboardcopy = (document.getElementById("query-export")as HTMLElement).innerText;
navigator.clipboard.writeText(clipboardcopy);
};


const JSONPull = async () => {
const response = await fetch("ScriptGenerator/MissionGenerator/characterInfo.json");
const data = await response.json();
console.log(JSON.stringify(data[clientList[currentclient]].controlpreview));
(document.getElementById("contractClientImage") as HTMLImageElement).src = data[clientList[currentclient]].controlpreview;
(document.getElementById("pre-dialogue-sprite") as HTMLImageElement).src = data[clientList[currentclient]].controlpreview;
(document.getElementById("post-dialogue-sprite") as HTMLImageElement).src = data[clientList[currentclient]].controlpreview;
(document.getElementById("miniImage") as HTMLImageElement).src = data[clientList[currentclient]].contractpreview;
};



let rewardValue = 0;
function generateExport () {
(document.getElementById("export") as HTMLElement).addEventListener("click", ExportFunction);



let contractcodename = "contractcodename";
let contractname = "Mission Name";
let contractdescription = "Contract Description";
let clientPic = "selene";
let song = "arrival";
let unlockedParts = "cabgold_3x2";
let unique = "!0";
let requirements = '{ type: "Command", limit: 1 },';
let reward = "";
let ship = "";
let scene = "";


let onelinepre = "";
let onelinepost = "";



function ExportFunction () {
  contractcodename = ((document.getElementById("contractid") as HTMLInputElement).value == "") ? contractcodename : (document.getElementById("contractid") as HTMLInputElement).value;
  contractname = ((document.getElementById("contractname") as HTMLInputElement).value == "") ? contractname : (document.getElementById("contractname") as HTMLInputElement).value;
  contractdescription = ((document.getElementById("contractdescription") as HTMLInputElement).value == "") ? contractdescription : (document.getElementById("contractdescription") as HTMLInputElement).value;
  clientPic = clientList[currentclient];
  song = songlist[currentsong];
  onelinepre = (document.getElementById("prebox") as HTMLInputElement).value;
  onelinepost = (document.getElementById("postbox") as HTMLInputElement).value;
  

  let allPreDialogue = preDialogueStrings;
  let allPreDialogeCombined: string[] = [];

  console.log(allPreDialogue.length);
  for (let i = 0; allPreDialogue.length > i ;i++) {
    console.log(allPreDialogue[i])
    allPreDialogeCombined.push(`"${allPreDialogue[i]}"`)
  };
  let finalAllPreStringsCombined = (allPreDialogeCombined.toString()+",");



  console.log(propertyListUsedInGame.toString().replace(/\(/g, '{').replace(/\)/g, '}'))

    //console.log("--- Export Result ---");
    let contractexport = (`
    
    
    ${contractcodename}: { //contractcodename is the mission name in the codes

    //Critical Components (get a list of values you can put in here)
  
    name: "${contractname}", //name is the name appearing in game
    description:
    "${contractdescription}", //description is the description for the contract (does not show up in game)
    clientPic: "${clientPic}", //clientPic the persona image that appears in the contract selector (defaulting to selene) (##gets pulled from a client list?)
    song: "${song}", //song that plays in game (##gets pulled from a song list?)
    storyDeps: [],  //If there's none or it's blank, it's at the start of your list!!!
    unlockedParts: [
      "cabgold_3x2",
    ], //unlockedParts are parts you instantly unlock for free (mainly to get used in the mission) once starting the mission (defaulting to cabgold_3x2) ##Optional
    unique: ${uniqueState}, //Unique !0 does I think the exact same thing as not having it here at all(?). !1 seems to behave like the infinite randomly generated missions post game?
    requirements: [
      ${ propertyListUsedInGame.toString().replace(/\(/g, '{').replace(/\)/g, '}') },
    ], //requirements the requirements on the left side of the game get created here. (defaulting to needing 1 command)
    reward: ${rewardValue}, //reward is a weird one, it comes in many forms. here G is a pre existing list of objects, but there are numerable, and sometimes the letter is just straight replaced with a custom list. It calculates like this, though it also calculates like 12e3 or some shit.
    //create a toggle which makes it so reward is calculated upon used parts? Like, simple, detailed and advanced options.
    //if you want a plain per part calculus, u(parts) would be fine. if you want more or less earnings, throw in an 0.01 <-> 9.99 * modifier or choose a pre-set list. If you wanna go spicy, create a custom list to subsitute (parts) write down a 12e3 esque value.
    
    //ship: g, //ship loads in a pre-build ship that's stored in the files
    //scene: b.J, //does... something??? Might execute the ShipCAT introduction?
  
    // -= -= -=
    //  Dialogue components (all the dialogue for this contract)
  
    script: {
      before: [
        Object(s.h)("${clientPic}"),
        ${finalAllPreStringsCombined}
        //"Dialogue Two!!!", //Object is the chat prompt(? idk how to call it) specifically the .h value here. You can have multiple messages (seperated by "" & ,) here that each need an ENTER press to continue. The selene calls selene's default talking portrait
        //Object(s.h)("selene.explains"),
        //"Cooler Dialogue Three!!", //Object here differs from the one above in that selene now switches over to the sub talking image .explains.
        Object(s.d)(), //Object here has the D value which sends the player to the ship builder.
      ],
      //Note that while nothing's here written, the player does get send to the shipbuilder.
      after: [
        Object(s.h)("${clientPic}"),
        "${onelinepost}", //Object here is a dialoge for the after-building scene.
        Object(s.b)(), //Object finishes the successfull contract.
      ],
    },
  };
    
    
    `);
    //console.log(contractexport);
    //console.log("--- End of Result ---");



    (document.getElementById("query-export") as HTMLElement).innerText = contractexport;
};
};

generateExport ();






function musicSwapcheckforward() {
  if (currentsong < songlist.length-1) 
  {
    currentsong++;
  } 
  else
  {
    currentsong=0;
  };
  musicSwap()
}

function musicSwapcheckbackward() {
  if (currentsong > 0) 
  {
    currentsong--;
  } 
  else
  {
    currentsong=songlist.length-1;
  };
  musicSwap()
}


function musicSwap() {


var otherName = "";  
otherName = (currentsong === 3) ? "<br> (event horizon)":otherName;
otherName = (currentsong === 6) ? "<br> (cool guy)":otherName;


(document.getElementById("displaySongName") as HTMLElement).innerHTML = songlist[currentsong] + otherName;
let song = (document.getElementById(songlist[currentsong]) as HTMLAudioElement);

for (let i = 0; i <= songlist.length-1; i++) {
(document.querySelectorAll("audio")[i]).pause();
(document.querySelectorAll("audio")[i]).currentTime = 0;
}

song.play();
};
musicSwap()






function clientSwapForward() {
  if (currentclient < clientList.length-1) 
  {
    currentclient++;
  } 
  else
  {
    currentclient=0;
  };
  clientSwap()
}

function clientSwapBackward() {
  if (currentclient > 0) 
  {
    currentclient--;
  } 
  else
  {
    currentclient=clientList.length-1;
  };
  clientSwap()
}


function clientSwap() {

  var otherclient = "";  
  otherclient = (currentclient == 2) ? "<br> (Barbara)":otherclient;
  otherclient = (currentclient == 4) ? "<br> (Meekins)":otherclient;
  otherclient = (currentclient == 5) ? "<br> (C.A.T.)":otherclient;
  otherclient = (currentclient == 6) ? "<br> (C.A.T. |Physical|)":otherclient;
  otherclient = (currentclient == 7) ? "<br> (-- scrambled --)":otherclient;
  otherclient = (currentclient == 8) ? "<br> (Science Bear)":otherclient;
  otherclient = (currentclient == 9) ? "<br> (blub)":otherclient;
  otherclient = (currentclient == 10) ? "<br> (Kilmo)":otherclient;
  otherclient = (currentclient == 12) ? "<br> (Red Crewmate)":otherclient;
  otherclient = (currentclient == 13) ? "<br> (Selene?)":otherclient;
  otherclient = (currentclient == 14) ? "<br> (Garbage Girl)":otherclient;
  otherclient = (currentclient == 16) ? "<br> (Myst)":otherclient;

  //too big too uneccesary, use the JSON for this.
  
  
  (document.getElementById("displayClientName") as HTMLElement).innerHTML = clientList[currentclient] + otherclient;
  (document.getElementById("contract-pre-charactername") as HTMLElement).innerHTML = clientList[currentclient];
  (document.getElementById("contract-post-charactername") as HTMLElement).innerHTML = clientList[currentclient];

  JSONPull();
};
  clientSwap()


  function musicPlayPause () {

    let song = (document.getElementById(songlist[currentsong]) as HTMLAudioElement);
    let playbutton = (document.getElementById("playpause") as HTMLElement);
    
    console.log(song.paused);
    if (song.paused) {
      song.play();
      playbutton.innerText = "⏸";
    } else {
      song.pause();
      playbutton.innerText = "⏵";
    };
};






function preNextButton () {
preDialogueCurrent++;


if (preDialogueStrings[preDialogueCurrent] === undefined) {
  preDialogueStrings[preDialogueCurrent] = "";
}

prebox.value = preDialogueStrings[preDialogueCurrent];
preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
console.log(preDialogueCurrent)

if (preDialogueCurrent >= 0) {
  (document.getElementById("prePreviousButton") as HTMLElement).style.opacity = "100%";
}


(document.getElementById("preCurrentAmountDialogue") as HTMLElement).innerText = preDialogueStrings.length.toString();
(document.getElementById("preCurrentDialoge") as HTMLElement).innerText = (preDialogueCurrent + 1).toString();
};

function prePreviousButton () {

  if (preDialogueCurrent >= 1) {
  preDialogueCurrent--;

  if (preDialogueStrings[preDialogueCurrent] === undefined) {
    preDialogueStrings[preDialogueCurrent] = "";
  }

  prebox.value = preDialogueStrings[preDialogueCurrent];
  preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
  console.log(preDialogueCurrent)
  }
  
  if (preDialogueCurrent === 0) {
    (document.getElementById("prePreviousButton") as HTMLElement).style.opacity = "0%";
  }

  (document.getElementById("preCurrentAmountDialogue") as HTMLElement).innerText = preDialogueStrings.length.toString();
  (document.getElementById("preCurrentDialoge") as HTMLElement).innerText = (preDialogueCurrent + 1).toString();
};





function preBoxMultiples(prebox: HTMLInputElement) {

  console.log(preDialogueStrings);
  let preDialogueCount = preDialogueStrings.length;
  let preDialogueCurrentString = prebox.value;


console.log(preDialogueStrings)
console.log(preDialogueCount)
console.log(preDialogueCurrent)


preDialogueStrings.splice(preDialogueCurrent, 1, preDialogueCurrentString);

console.log(preDialogueStrings)

};



function preRemoveCurrentTextbox () {

if (preDialogueStrings.length > 1) {

console.log(preDialogueStrings);
preDialogueStrings.splice(preDialogueCurrent, 1);
console.log(preDialogueStrings);

if (preDialogueCurrent >= preDialogueStrings.length) {
  preDialogueCurrent--;
};

if (preDialogueStrings[preDialogueCurrent] === undefined) {
  preDialogueStrings[preDialogueCurrent] = "";
};

prebox.value = preDialogueStrings[preDialogueCurrent];
preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
console.log(preDialogueCurrent);

if (preDialogueCurrent === 0) {
  (document.getElementById("prePreviousButton") as HTMLElement).style.opacity = "0%";
};

(document.getElementById("preCurrentAmountDialogue") as HTMLElement).innerText = preDialogueStrings.length.toString();
(document.getElementById("preCurrentDialoge") as HTMLElement).innerText = (preDialogueCurrent + 1).toString();
}
};



function preAddCurrentTextbox () {

  preDialogueCurrent++;

if (preDialogueStrings[preDialogueCurrent] === undefined) {
  preDialogueStrings[preDialogueCurrent] = "";
} else {
  preDialogueStrings.splice(preDialogueCurrent, 0, "");
}





prebox.value = preDialogueStrings[preDialogueCurrent];
preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
console.log(preDialogueCurrent)

if (preDialogueCurrent >= 0) {
  (document.getElementById("prePreviousButton") as HTMLElement).style.opacity = "100%";
}


(document.getElementById("preCurrentAmountDialogue") as HTMLElement).innerText = preDialogueStrings.length.toString();
(document.getElementById("preCurrentDialoge") as HTMLElement).innerText = (preDialogueCurrent + 1).toString();

} //merge with the Next functionality



//Array of all current properties
const propertyList:any = [];



//Make it smarter than this, so its categorised in groups that can use other parameters.
const usableTypeList = ["Thrust", "Fuel", "Command", "Passenger", "Radar", "Cargo", "Firepower", "Energy", "Comms", "Maneuverability", "Fleet", "T2M", "Mass", "Landing", "Power", "Range", "Armor", "Part", "Compact", "CompactX", "CompactY", "ImportTax", "CrewPartsConnected", "Cloack", "HotSpace"];
const directionList = ["top", "bottom", "front", "rear"];
const modeList = ["min", "max"];
const partTypeList = (async () => {
  const data = await retrieveAllObjects();
  return data
})()


const unusableTypeList = ["Size","Overlap","Heat","AttachedParts","PositiveEnergy","Hazard","AllPartsFueled","Profitable","Radiation"]; //These don't do anything or are already standardly used, doen't crash the game though. //Instead of hazard, create obstruction? view windows that can be obsctructed, but the half that is doesn't count.




//do these properties need to exist? what if I want a custom property?
//class Requirements {
//constructor(type, direction){
//this.type= ;
//this.direction ;
interface createRequirements {

  type: string; //What type of requirement do you want? ##Some types don't require any other properties than this one.
  direction: string; //What direction is this in? ##Exclusive to Armor Types.
  mode: string; //How many do you need of this part at minimum or maximally? ##Exclusive to Part Types.
  partType: string; //If using the Part Type, what part are we talking about? ##Exclusive to Part Types
  limit: string|number; //How much do you want of this? ##Most Types use round numbers, but Maneuverability types use decimals for example.
}
//}
//}


//The set variables for one (with checks verifying these)
let currentRequirementSelection: number;
let currentRequiredPartSelection: number;
let currentDirectionSelection: number;


//if type from *LIST*, also check for these properties, else, disregard them as they are optional in that regard.
var newRequirements: Partial<createRequirements|any> = {};
// newRequirements.type; //##This displays different on Directions or Part Types, so create custom names, like as in the json?
// newRequirements.direction;
// newRequirements.mode = modeList[0];

// newRequirements.partType;
// newRequirements.limit = 0;


//Green if valid? Red delete? What do I want with the colouring?

//Image be item/requirement preview??


async function addRequirementExecutor () {

  if (newRequirements.type === "Part") {

  Object.keys(newRequirements).forEach(function(itm){
    if( itm != "type" && itm != "mode" && itm != "partType" && itm != "limit" ) delete newRequirements[itm];
  });
} else if ( newRequirements.type === "Armor" ) {

  Object.keys(newRequirements).forEach(function(itm){
    if( itm != "type" && itm != "direction" ) delete newRequirements[itm];
  });
} else if ( newRequirements.type === undefined ) {

  Object.keys(newRequirements).forEach(function(itm){
    delete newRequirements[itm];
    console.log("##Fix invalid statements##")
  });
} else {

  Object.keys(newRequirements).forEach(function(itm){
    if( itm != "type" && itm != "limit" ) delete newRequirements[itm];
  });
};


  // console.log("##")
  // console.log(currentRequirementSelection);
  // console.log(usableTypeList[currentRequirementSelection]);
  // console.log("--")
  // console.log((await newRequirements));
  // console.log((await newRequirements.type));
  // console.log("##");

  // console.log("-StoreInArray-");
  // console.log((newRequirements));
  // console.log(JSON.stringify((newRequirements)).replace("{","(").replace("}",")").replace(/"([^"]+)":/g, '$1:'));

  propertyListUsedInGame.push( (JSON.stringify((newRequirements)).replace("{","(").replace("}",")").replace(/"([^"]+)":/g, '$1:')) );
  // console.log(propertyListUsedInGame);
  propertyList.push( (JSON.stringify((newRequirements)).replace("{","(").replace("}",")")) );
  console.log(propertyList);

  const arrayOfAllRequirements = (i: number) => { return JSON.parse(propertyList[i].replace("(","{").replace(")","}")) };

  // console.log(propertyList.length)
  // console.log("-StoreInArray-")


document.getElementById("requirementsList")!.innerHTML = "";
for (let i = 0; i < propertyList.length; i++) {

const requirementTitle: HTMLElement = document.createElement("span");
requirementTitle.setAttribute("style", "text-align: left; display: inline-block; width: 170px; position: relative; top:-4px; text-transform: capitalize;");


if (await arrayOfAllRequirements(i).type === "Part") { requirementTitle.innerText = (await arrayOfAllRequirements(i).partType).replaceAll("_"," ")} else {
  requirementTitle.innerText = (await arrayOfAllRequirements(i).type);  
};



console.log(i);
console.log(await arrayOfAllRequirements(i).type);

const requirementProcess: HTMLElement = document.createElement("span");
requirementProcess.setAttribute("style", "text-align: center; display: inline-block; width: 170px; position: relative; top:-4px; left: 8px;");
requirementProcess.innerText = "|";

const requirementLimit: HTMLElement = document.createElement("span");
requirementLimit.setAttribute("style", "text-align: right; display: inline-block; width: 170px; position: relative; top:-4px; left: 0px;");
requirementLimit.innerText = arrayOfAllRequirements(i).limit;

if (await arrayOfAllRequirements(i).mode === "min") {
requirementLimit.innerText = (">= " + await arrayOfAllRequirements(i).limit)
} else if (await arrayOfAllRequirements(i).mode === "max") {
  requirementLimit.innerText = ("<= " + await arrayOfAllRequirements(i).limit)
}else {
  requirementLimit.innerText = (await arrayOfAllRequirements(i).limit);  
}; //this one's actually for the | up there.


requirementLimit.innerHTML = requirementLimit.innerHTML + `‎ <img src="ScriptGenerator/MissionGenerator/XMark.png" style="position: relative; scale: 250%; image-rendering: pixelated; top: -3px; left: 8px;">`;



const requirement: HTMLElement = document.createElement("ul");
requirement.setAttribute("style", "padding: 0; margin: 0; position: relative; top: -27px; left: 0px; display: block; color: rgb(249, 81, 146); width: 527px; background-color: rgb(36, 9, 51); margin-bottom: 5px; max-height: 25px;");
requirement.append(requirementTitle, requirementProcess, requirementLimit);

document.getElementById("requirementsList")!.append(requirement);
//instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
}




newRequirements = {};

(document.getElementById("currentRequirementSelection") as HTMLElement).innerText = "[Not Selected] ";
(document.getElementById("currentRequiredPartSelection") as HTMLElement).innerText = "[Not Selected] ";
(document.getElementById("currentDirectionSelection") as HTMLElement).innerText = "[Not Selected] ";
(document.getElementById("modeMinimum") as HTMLElement).innerText = "Min";
(document.getElementById("modeMaximum") as HTMLElement).innerText = "Max";
(document.getElementById("limitValueBox") as HTMLInputElement).value = '';
(document.getElementById("customValueBox") as HTMLInputElement).value = '';




(document.getElementById("required-part-element") as HTMLElement).style.visibility = "hidden";
(document.getElementById("mode-element") as HTMLElement).style.visibility = "hidden";
(document.getElementById("direction-element") as HTMLElement).style.visibility = "hidden";
(document.getElementById("value-element") as HTMLElement).style.visibility = "hidden";
(document.getElementById("custom-parameter-element") as HTMLElement).style.visibility = "hidden";



}



//##
//#  Dropdown system for requirements
//##

function requirementDropdown () {

  for (let i = 0; i < usableTypeList.length; i++) {
const current = (document.getElementsByClassName("requirementclass") as HTMLCollectionOf<HTMLElement>)[i].style.display;

const expr = current;
switch (expr) {
  case 'none':
    (document.getElementsByClassName("requirementclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "block";
    (document.getElementById("currentRequirementSelectionDirection") as HTMLElement).innerText = "↑";
    (document.getElementById("requirementTypeList") as HTMLElement).style.height = "100px";
    break;
  case 'block':
    (document.getElementsByClassName("requirementclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "none";
    (document.getElementById("currentRequirementSelectionDirection") as HTMLElement).innerText = "↓";
    (document.getElementById("requirementTypeList") as HTMLElement).style.height = "0px";
    break;
    }
  }
};


function GenerateRequirementList () {

  document.getElementById("requirementTypeList")!.innerHTML = "";
  for (let i = 0; i < usableTypeList.length; i++) {

  const requirementTypeList: HTMLElement = document.createElement("li");
  requirementTypeList.setAttribute("class", "interactible requirementclass requirementTypeListID");
  requirementTypeList.setAttribute("style", "display: none;");
  requirementTypeList.setAttribute("tabindex", "0");
  requirementTypeList.innerText = usableTypeList[i];

  //console.log(usableTypeList[i]);

  document.getElementById("requirementTypeList")!.append(requirementTypeList);
  //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
  }
}
GenerateRequirementList();





async function storeRequirementSelection (i: number) {
 
  if (usableTypeList[i] === "Part") {
    (document.getElementById("direction-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("value-element") as HTMLElement).style.visibility = "visible";
    (document.getElementById("custom-parameter-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("mode-element") as HTMLElement).style.visibility = "visible";
    (document.getElementById("required-part-element") as HTMLElement).style.visibility = "visible";
  } else if (usableTypeList[i] !== "Armor") {
    (document.getElementById("required-part-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("mode-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("direction-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("value-element") as HTMLElement).style.visibility = "visible";
    (document.getElementById("custom-parameter-element") as HTMLElement).style.visibility = "hidden";
  };

  if (usableTypeList[i] === "Armor") {
    (document.getElementById("direction-element") as HTMLElement).style.visibility = "visible";
    (document.getElementById("value-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("custom-parameter-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("mode-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("required-part-element") as HTMLElement).style.visibility = "hidden";
  } else if (usableTypeList[i] !== "Part") {
    (document.getElementById("required-part-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("mode-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("direction-element") as HTMLElement).style.visibility = "hidden";
    (document.getElementById("value-element") as HTMLElement).style.visibility = "visible";
    (document.getElementById("custom-parameter-element") as HTMLElement).style.visibility = "hidden";
  };





currentRequirementSelection = i;

newRequirements.type = await usableTypeList[currentRequirementSelection];

const currentSelectionAsText = usableTypeList[i];
console.log(currentRequirementSelection + currentSelectionAsText);

(document.getElementById("currentRequirementSelection") as HTMLElement).innerText = currentSelectionAsText;

};

for (let i = 0; i < usableTypeList.length; i++) {
(document.getElementsByClassName("requirementTypeListID") as HTMLCollectionOf<HTMLElement>)[i].addEventListener("mousedown", storeRequirementSelection.bind(this, i) );
}
//##
//#  
//##


//##
//#  Dropdown system for required parts
//##

  async function requiredPartDropdown () {
  
    for (let i = 0; i < (await partTypeList).length; i++) {
  const current = (document.getElementsByClassName("requiredPartclass") as HTMLCollectionOf<HTMLElement>)[i].style.display;
  
  const expr = current;
  switch (expr) {
    case 'none':
      (document.getElementsByClassName("requiredPartclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "block";
      (document.getElementById("currentRequiredPartSelectionDirection") as HTMLElement).innerText = "↑";
      (document.getElementById("requiredPartTypeList") as HTMLElement).style.height = "100px";
      break;
    case 'block':
      (document.getElementsByClassName("requiredPartclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "none";
      (document.getElementById("currentRequiredPartSelectionDirection") as HTMLElement).innerText = "↓";
      (document.getElementById("requiredPartTypeList") as HTMLElement).style.height = "0px";
      break;
      }
    }
  };
  
  
  async function GenerateRequiredPartList () {
  
    document.getElementById("requiredPartTypeList")!.innerHTML = "";
    for (let i = 0; i < (await partTypeList).length; i++) {
  
    const requiredPartTypeList: HTMLElement = document.createElement("li");
    requiredPartTypeList.setAttribute("class", "interactible requiredPartclass requiredPartTypeListID");
    requiredPartTypeList.setAttribute("style", "display: none;");
    requiredPartTypeList.innerText = (await partTypeList)[i];
  
    //console.log(partTypeList[i]);
  
    document.getElementById("requiredPartTypeList")!.append(requiredPartTypeList);
    //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
  }
  GenerateRequiredPartList();
  
  
  
  
  
  async function storeRequiredPartSelection (i: number) {
  
  currentRequiredPartSelection = i;


  newRequirements.partType = (await partTypeList)[currentRequiredPartSelection];

  const currentSelectionAsText = (await partTypeList)[i];
  console.log(currentRequiredPartSelection + currentSelectionAsText);
  
  (document.getElementById("currentRequiredPartSelection") as HTMLElement).innerText = currentSelectionAsText;
  
  };

  async function addEventlisteners (this: any) { //definitely optimise this
    const generationLength = (await partTypeList);



    for (let i = 0; i < await generationLength.length; i++) {
  (document.getElementsByClassName("requiredPartTypeListID") as HTMLCollectionOf<HTMLElement>)[await i].addEventListener("mousedown", storeRequiredPartSelection.bind(this, i) );
  }
}
addEventlisteners();
//##
//#  
//##


//##
//#  Direction system
//##

  
  function DirectionDropdown () {
  
    for (let i = 0; i < directionList.length; i++) {
  const current = (document.getElementsByClassName("directionclass") as HTMLCollectionOf<HTMLElement>)[i].style.display;
  
  const expr = current;
  switch (expr) {
    case 'none':
      (document.getElementsByClassName("directionclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "block";
      (document.getElementById("currentDirectionSelectionDirection") as HTMLElement).innerText = "↑";
      (document.getElementById("directionList") as HTMLElement).style.height = "100px";
      break;
    case 'block':
      (document.getElementsByClassName("directionclass") as HTMLCollectionOf<HTMLElement>)[i].style.display = "none";
      (document.getElementById("currentDirectionSelectionDirection") as HTMLElement).innerText = "↓";
      (document.getElementById("directionList") as HTMLElement).style.height = "0px";
      break;
      }
    }
  };
  
  
  function GenerateDirectionList () {
  
    document.getElementById("directionList")!.innerHTML = "";
    for (let i = 0; i < directionList.length; i++) {
  
    const directionListElement: HTMLElement = document.createElement("li");
    directionListElement.setAttribute("class", "interactible directionclass directionListID");
    directionListElement.setAttribute("style", "display: none;");
    directionListElement.innerText = directionList[i];
  
    //console.log(partTypeList[i]);
  
    document.getElementById("directionList")!.append(directionListElement);
    //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
  }
  GenerateDirectionList();
  
  
  
  
    async function storeDirectionSelection (i: number) {
      currentDirectionSelection = i;
      const currentSelectionAsText = directionList[i];

      newRequirements.direction = await directionList[i];
      
      (document.getElementById("currentDirectionSelection") as HTMLElement).innerText = currentSelectionAsText;
      };
      
      for (let i = 0; i < directionList.length; i++) {
      (document.getElementsByClassName("directionListID") as HTMLCollectionOf<HTMLElement>)[i].addEventListener("mousedown", storeDirectionSelection.bind(this, i) );
};
//##
//#  
//##






function selectMinimum () {
  newRequirements.mode = modeList[0];
  (document.getElementById("modeMinimum") as HTMLElement).innerText = "[Min]";
  (document.getElementById("modeMaximum") as HTMLElement).innerText = "Max";
}




function selectMaximum () {
  newRequirements.mode = modeList[1];
  (document.getElementById("modeMinimum") as HTMLElement).innerText = "Min";
  (document.getElementById("modeMaximum") as HTMLElement).innerText = "[Max]";
}




function limitValueRetrieve () {
  setTimeout(function() {
    console.log((document.getElementById("limitValueBox") as HTMLInputElement).value);
    newRequirements.limit = (document.getElementById("limitValueBox") as HTMLInputElement).value;
  }, 1);
}




function rewardValueRetrieve () {
  setTimeout(function() {
    console.log((document.getElementById("rewardValueBox") as HTMLInputElement).value);
    rewardValue = Number((document.getElementById("rewardValueBox") as HTMLInputElement).value);
    (document.getElementById("previewContractCost") as HTMLInputElement).innerText = rewardValue.toLocaleString();
  }, 1);
}







async function retrieveAllObjects () {

let objectList = async () => {
const vanillaObjectList = await fetch("./objects.json");
let cool = await vanillaObjectList.json()
 
const arrayOfObjects: string[] = [];
for (let i = 0; i < Object.keys(cool).length; i++) {

  
  let pushme = Object.keys(cool)[i];
  //console.log(pushme)
arrayOfObjects.push(pushme);
}
//console.log(arrayOfObjects)
return arrayOfObjects;
};

const arrayOfObjects = await objectList();
console.log(arrayOfObjects);
return arrayOfObjects;

};




function uniqueSwitch() {

if (uniqueState !== !0) { //true
  uniqueState = !0;
  (document.getElementById("isItUnique") as HTMLElement).innerText = "[✓]";
} else { //false
  uniqueState = !1;
  (document.getElementById("isItUnique") as HTMLElement).innerText = "[X]";
};


};



///Needs cleanup with, for example, the mother function that starts it all.


function contractEditorMO () {

}



function preLoading () { //stuff in here should not crash if missing, but do add all interactivity to the program. These often execute on their own

}


function eventListeners () {
  (document.getElementById("playpause") as HTMLElement).addEventListener("click", musicPlayPause);
  (document.getElementById("songright") as HTMLElement).addEventListener("click", musicSwapcheckforward);
  (document.getElementById("songleft") as HTMLElement).addEventListener("click", musicSwapcheckbackward);
  (document.getElementById("clientright") as HTMLElement).addEventListener("click", clientSwapForward);
  (document.getElementById("clientleft") as HTMLElement).addEventListener("click", clientSwapBackward);
  (document.getElementById("contractname") as HTMLInputElement).addEventListener("input", pog);
  (document.getElementById("prebox") as HTMLInputElement).addEventListener("input", pog2);
  (document.getElementById("postbox") as HTMLInputElement).addEventListener("input", pog3);
  
  for (let i = 0; i < document.getElementsByClassName("ui-button").length; i++) {
    document.getElementsByClassName("ui-button")[i].addEventListener("click", selectbutton);
  };
  
  (document.getElementById("copyquery") as HTMLElement).addEventListener("click", exportQuery);
  (document.getElementById("preNextButton") as HTMLElement).addEventListener("click", preNextButton);
  (document.getElementById("prePreviousButton") as HTMLElement).addEventListener("click", prePreviousButton);
  (document.getElementById("preRemoveTextbox") as HTMLElement).addEventListener("click", preRemoveCurrentTextbox);
  (document.getElementById("preAddTextbox") as HTMLElement).addEventListener("click", preAddCurrentTextbox);
  (document.getElementById("addRequirement") as HTMLElement).addEventListener("click", addRequirementExecutor);
  (document.getElementById("requirement-dropdown") as HTMLElement).addEventListener("click", requirementDropdown);
  (document.getElementById("required-part-dropdown") as HTMLElement).addEventListener("click", requiredPartDropdown);
  (document.getElementById("direction-dropdown") as HTMLElement).addEventListener("click", DirectionDropdown);
  (document.getElementById("modeMinimum") as HTMLElement).addEventListener("click", selectMinimum);
  (document.getElementById("modeMaximum") as HTMLElement).addEventListener("click", selectMaximum);
  
  (document.getElementById("limitValueBox") as HTMLElement).addEventListener("change", limitValueRetrieve);                         
  (document.getElementById("rewardValueBox") as HTMLElement).addEventListener("change", rewardValueRetrieve);
  (document.getElementById("isItUnique") as HTMLElement).addEventListener("click", uniqueSwitch);
}
eventListeners();