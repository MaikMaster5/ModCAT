"use strict";
//Two SHI versions: ModCAT and OptCAT
// - ModCAT should be used for save file access, log file creation and the loading of external scripts. | This has no/restrictedly repaired Steam Functionaliy
// - OptCAT should remove all console logs, have cleaner code, more optimized loading and have bugs fixed (like no animation on propellor or stuff being Sync instead of async) | This has full Steam Functionality.
// - Both could have some overlapping stuff? Though maybe fun trinkets like a speedrun timer or returning to old missions should just stay ModCAT exclusive.
//Have a try catch for anything reading external files so browser functionality stays?
//can one have more than one ship in a mission? (The big contract)
// revrender needs forward & back button ( what is a revrender? )
//not hard code version into the html?
//move requirements above the parts options?
//add a loader for js once its done like in game.
//settings audio stuff
//export stuff as files to be used in a mod folder
//export character in character creator to the mod tool?
//hold the phone, my mini sprites are... out of date?
//delete current
//insert new here
//edit existing export (file only? only work on verify?)
//don't run blank ones on export
//who cares
//autoselect type on new panel
//why arent double spaces showing?
//remove the text input overlay and make it just work with editable elements
//wog
//grab element by id and style inner elements instead of all having their own id
//missing external files should not corrupt the save in any caliber. Back-up saves will also be made regularly
//While I can escape/catch the issue, I might just want to either fix the reader or disable it in the save.
//Maybe even down the line allow some featuresets of objects be brand new concepts not in the game or have script loaders for advanced mods?
//Though number one priority is stability and steam functionality, as currently modifications can ruin a save for example, so I need a lot of escape clauses and value overrides, storage or removals.
//Create a mod folder if it doesn't exist???? With a "place_mod_files_here" file
//(are all modfiles .json? .pack? .SHI-p or .MODCat?)
//as not-unique missions are generated by a seed value, I could make a menu where you can play a mission from a seed.
//could funnily share missions with one another like that. Maybe even display seed name in a non-unique mission?? (automatic) Text (string in box) to seed converter as well? Would be dope in the mod menu
//note: is a seed converter needed? the game uses the date as the daily seed! so it should already exist?
//mod in a feature that automatically executes the NEXT text and one that changes text speed for that line. It would be cool if you could have the game take control like that.
//have a blank Reward box throw in a calculated reward instead.
//with this editor, I want limits which you can disable in settings as to not overwhelm the gui
//also, please add the ability to remove Requirements when pressing X, or if clicking on itself the ability to change it
//Maybe replace the Add button with a Save button and Delete button, while loading in what it's set to?? (How did I store this again?)
const propertyListUsedInGame = [];
let uniqueState = !0;
var preDialogueCurrent = 0;
var preDialogueStrings = [""];
document.getElementById("preCurrentAmountDialogue").innerText = preDialogueStrings.length.toString();
document.getElementById("preCurrentDialoge").innerText = (preDialogueCurrent + 1).toString();
let songlist = ["arrival", "lagrange", "haze", "breakbeat", "positron", "floating", "koyo", "azure", "ending", "credits", "cobaltcore"];
let currentsong = 0;
let clientList = ["selene", "wren", "grandma", "soggins", "meercat", "cat", "cat2", "outlaw", "scientist", "axel", "aaron", "rat", "amongus", "futureSelene", "garbogirl", "lilibri", "dummycharacter"];
//get real names from the Json.
let currentclient = 0;
function pog() {
    document.getElementById("previewContractName").innerText = (document.getElementById("contractname").value !== "") ? document.getElementById("contractname").value : "contractname";
}
;
pog();
let prebox = document.getElementById("prebox");
let preboxrender = document.getElementById("preboxrender");
function pog2() {
    console.log(prebox.value);
    preBoxMultiples(prebox);
    preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
}
;
pog2();
function pog3() {
    console.log(document.getElementById("postbox").value);
    document.getElementById("postboxrender").innerText = (document.getElementById("postbox").value !== "") ? document.getElementById("postbox").value : "This is some placeholder text! You can change it!";
}
;
pog3();
function selectbutton() {
    for (let i = 0; i < document.getElementsByClassName("ui-button").length; i++) {
        document.getElementsByClassName("ui-button")[i].setAttribute("class", "ui-button");
    }
    ;
    console.log(document.querySelectorAll(`[active]`).length);
    for (let i = 0; i < document.querySelectorAll(`[active]`).length; i++) {
        document.querySelectorAll(`[active]`)[i].setAttribute("active", "false");
    }
    this.setAttribute("class", "ui-button ui-button-selected");
    if (document.getElementById(`editor-ui-${this.getAttribute("name")}`) !== null) {
        document.getElementById(`editor-ui-${this.getAttribute("name")}`).setAttribute("active", "true");
    }
    ;
    if (document.getElementById(`display-preview-${this.getAttribute("name")}`) !== null) {
        document.getElementById(`display-preview-${this.getAttribute("name")}`).setAttribute("active", "true");
    }
    ;
}
;
function exportQuery() {
    const clipboardcopy = document.getElementById("query-export").innerText;
    navigator.clipboard.writeText(clipboardcopy);
}
;
const JSONPull = async () => {
    const response = await fetch("ScriptGenerator/MissionGenerator/characterInfo.json");
    const data = await response.json();
    console.log(JSON.stringify(data[clientList[currentclient]].controlpreview));
    document.getElementById("contractClientImage").src = data[clientList[currentclient]].controlpreview;
    document.getElementById("pre-dialogue-sprite").src = data[clientList[currentclient]].controlpreview;
    document.getElementById("post-dialogue-sprite").src = data[clientList[currentclient]].controlpreview;
    document.getElementById("miniImage").src = data[clientList[currentclient]].contractpreview;
};
let rewardValue = 0;
function generateExport() {
    document.getElementById("export").addEventListener("click", ExportFunction);
    let contractcodename = "contractcodename";
    let contractname = "Mission Name";
    let contractdescription = "Contract Description";
    let clientPic = "selene";
    let song = "arrival";
    let unlockedParts = "cabgold_3x2";
    let unique = "!0";
    let requirements = '{ type: "Command", limit: 1 },';
    let reward = "";
    let ship = "";
    let scene = "";
    let onelinepre = "";
    let onelinepost = "";
    function ExportFunction() {
        contractcodename = (document.getElementById("contractid").value == "") ? contractcodename : document.getElementById("contractid").value;
        contractname = (document.getElementById("contractname").value == "") ? contractname : document.getElementById("contractname").value;
        contractdescription = (document.getElementById("contractdescription").value == "") ? contractdescription : document.getElementById("contractdescription").value;
        clientPic = clientList[currentclient];
        song = songlist[currentsong];
        onelinepre = document.getElementById("prebox").value;
        onelinepost = document.getElementById("postbox").value;
        let allPreDialogue = preDialogueStrings;
        let allPreDialogeCombined = [];
        console.log(allPreDialogue.length);
        for (let i = 0; allPreDialogue.length > i; i++) {
            console.log(allPreDialogue[i]);
            allPreDialogeCombined.push(`"${allPreDialogue[i]}"`);
        }
        ;
        let finalAllPreStringsCombined = (allPreDialogeCombined.toString() + ",");
        console.log(propertyListUsedInGame.toString().replace(/\(/g, '{').replace(/\)/g, '}'));
        //console.log("--- Export Result ---");
        let contractexport = (`
    
    
    ${contractcodename}: { //contractcodename is the mission name in the codes

    //Critical Components (get a list of values you can put in here)
  
    name: "${contractname}", //name is the name appearing in game
    description:
    "${contractdescription}", //description is the description for the contract (does not show up in game)
    clientPic: "${clientPic}", //clientPic the persona image that appears in the contract selector (defaulting to selene) (##gets pulled from a client list?)
    song: "${song}", //song that plays in game (##gets pulled from a song list?)
    storyDeps: [],  //If there's none or it's blank, it's at the start of your list!!!
    unlockedParts: [
      "cabgold_3x2",
    ], //unlockedParts are parts you instantly unlock for free (mainly to get used in the mission) once starting the mission (defaulting to cabgold_3x2) ##Optional
    unique: ${uniqueState}, //Unique !0 does I think the exact same thing as not having it here at all(?). !1 seems to behave like the infinite randomly generated missions post game?
    requirements: [
      ${propertyListUsedInGame.toString().replace(/\(/g, '{').replace(/\)/g, '}')},
    ], //requirements the requirements on the left side of the game get created here. (defaulting to needing 1 command)
    reward: ${rewardValue}, //reward is a weird one, it comes in many forms. here G is a pre existing list of objects, but there are numerable, and sometimes the letter is just straight replaced with a custom list. It calculates like this, though it also calculates like 12e3 or some shit.
    //create a toggle which makes it so reward is calculated upon used parts? Like, simple, detailed and advanced options.
    //if you want a plain per part calculus, u(parts) would be fine. if you want more or less earnings, throw in an 0.01 <-> 9.99 * modifier or choose a pre-set list. If you wanna go spicy, create a custom list to subsitute (parts) write down a 12e3 esque value.
    
    //ship: g, //ship loads in a pre-build ship that's stored in the files
    //scene: b.J, //does... something??? Might execute the ShipCAT introduction?
  
    // -= -= -=
    //  Dialogue components (all the dialogue for this contract)
  
    script: {
      before: [
        Object(s.h)("${clientPic}"),
        ${finalAllPreStringsCombined}
        //"Dialogue Two!!!", //Object is the chat prompt(? idk how to call it) specifically the .h value here. You can have multiple messages (seperated by "" & ,) here that each need an ENTER press to continue. The selene calls selene's default talking portrait
        //Object(s.h)("selene.explains"),
        //"Cooler Dialogue Three!!", //Object here differs from the one above in that selene now switches over to the sub talking image .explains.
        Object(s.d)(), //Object here has the D value which sends the player to the ship builder.
      ],
      //Note that while nothing's here written, the player does get send to the shipbuilder.
      after: [
        Object(s.h)("${clientPic}"),
        "${onelinepost}", //Object here is a dialoge for the after-building scene.
        Object(s.b)(), //Object finishes the successfull contract.
      ],
    },
  };
    
    
    `);
        //console.log(contractexport);
        //console.log("--- End of Result ---");
        document.getElementById("query-export").innerText = contractexport;
    }
    ;
}
;
generateExport();
function musicSwapcheckforward() {
    if (currentsong < songlist.length - 1) {
        currentsong++;
    }
    else {
        currentsong = 0;
    }
    ;
    musicSwap();
}
function musicSwapcheckbackward() {
    if (currentsong > 0) {
        currentsong--;
    }
    else {
        currentsong = songlist.length - 1;
    }
    ;
    musicSwap();
}
function musicSwap() {
    var otherName = "";
    otherName = (currentsong === 3) ? "<br> (event horizon)" : otherName;
    otherName = (currentsong === 6) ? "<br> (cool guy)" : otherName;
    document.getElementById("displaySongName").innerHTML = songlist[currentsong] + otherName;
    let song = document.getElementById(songlist[currentsong]);
    for (let i = 0; i <= songlist.length - 1; i++) {
        (document.querySelectorAll("audio")[i]).pause();
        (document.querySelectorAll("audio")[i]).currentTime = 0;
    }
    song.play();
}
;
musicSwap();
function clientSwapForward() {
    if (currentclient < clientList.length - 1) {
        currentclient++;
    }
    else {
        currentclient = 0;
    }
    ;
    clientSwap();
}
function clientSwapBackward() {
    if (currentclient > 0) {
        currentclient--;
    }
    else {
        currentclient = clientList.length - 1;
    }
    ;
    clientSwap();
}
function clientSwap() {
    var otherclient = "";
    otherclient = (currentclient == 2) ? "<br> (Barbara)" : otherclient;
    otherclient = (currentclient == 4) ? "<br> (Meekins)" : otherclient;
    otherclient = (currentclient == 5) ? "<br> (C.A.T.)" : otherclient;
    otherclient = (currentclient == 6) ? "<br> (C.A.T. |Physical|)" : otherclient;
    otherclient = (currentclient == 7) ? "<br> (-- scrambled --)" : otherclient;
    otherclient = (currentclient == 8) ? "<br> (Science Bear)" : otherclient;
    otherclient = (currentclient == 9) ? "<br> (blub)" : otherclient;
    otherclient = (currentclient == 10) ? "<br> (Kilmo)" : otherclient;
    otherclient = (currentclient == 12) ? "<br> (Red Crewmate)" : otherclient;
    otherclient = (currentclient == 13) ? "<br> (Selene?)" : otherclient;
    otherclient = (currentclient == 14) ? "<br> (Garbage Girl)" : otherclient;
    otherclient = (currentclient == 16) ? "<br> (Myst)" : otherclient;
    //too big too unneccesary, use the JSON for this.
    document.getElementById("displayClientName").innerHTML = clientList[currentclient] + otherclient;
    document.getElementById("contract-pre-charactername").innerHTML = clientList[currentclient];
    document.getElementById("contract-post-charactername").innerHTML = clientList[currentclient];
    JSONPull();
}
;
clientSwap();
function musicPlayPause() {
    let song = document.getElementById(songlist[currentsong]);
    let playbutton = document.getElementById("playpause");
    console.log(song.paused);
    if (song.paused) {
        song.play();
        playbutton.innerText = "⏸";
    }
    else {
        song.pause();
        playbutton.innerText = "⏵";
    }
    ;
}
;
function preNextButton() {
    preDialogueCurrent++;
    if (preDialogueStrings[preDialogueCurrent] === undefined) {
        preDialogueStrings[preDialogueCurrent] = "";
    }
    prebox.value = preDialogueStrings[preDialogueCurrent];
    preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
    console.log(preDialogueCurrent);
    if (preDialogueCurrent >= 0) {
        document.getElementById("prePreviousButton").style.opacity = "100%";
    }
    document.getElementById("preCurrentAmountDialogue").innerText = preDialogueStrings.length.toString();
    document.getElementById("preCurrentDialoge").innerText = (preDialogueCurrent + 1).toString();
}
;
function prePreviousButton() {
    if (preDialogueCurrent >= 1) {
        preDialogueCurrent--;
        if (preDialogueStrings[preDialogueCurrent] === undefined) {
            preDialogueStrings[preDialogueCurrent] = "";
        }
        prebox.value = preDialogueStrings[preDialogueCurrent];
        preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
        console.log(preDialogueCurrent);
    }
    if (preDialogueCurrent === 0) {
        document.getElementById("prePreviousButton").style.opacity = "0%";
    }
    document.getElementById("preCurrentAmountDialogue").innerText = preDialogueStrings.length.toString();
    document.getElementById("preCurrentDialoge").innerText = (preDialogueCurrent + 1).toString();
}
;
function preBoxMultiples(prebox) {
    console.log(preDialogueStrings);
    let preDialogueCount = preDialogueStrings.length;
    let preDialogueCurrentString = prebox.value;
    console.log(preDialogueStrings);
    console.log(preDialogueCount);
    console.log(preDialogueCurrent);
    preDialogueStrings.splice(preDialogueCurrent, 1, preDialogueCurrentString);
    console.log(preDialogueStrings);
}
;
function preRemoveCurrentTextbox() {
    if (preDialogueStrings.length > 1) {
        console.log(preDialogueStrings);
        preDialogueStrings.splice(preDialogueCurrent, 1);
        console.log(preDialogueStrings);
        if (preDialogueCurrent >= preDialogueStrings.length) {
            preDialogueCurrent--;
        }
        ;
        if (preDialogueStrings[preDialogueCurrent] === undefined) {
            preDialogueStrings[preDialogueCurrent] = "";
        }
        ;
        prebox.value = preDialogueStrings[preDialogueCurrent];
        preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
        console.log(preDialogueCurrent);
        if (preDialogueCurrent === 0) {
            document.getElementById("prePreviousButton").style.opacity = "0%";
        }
        ;
        document.getElementById("preCurrentAmountDialogue").innerText = preDialogueStrings.length.toString();
        document.getElementById("preCurrentDialoge").innerText = (preDialogueCurrent + 1).toString();
    }
}
;
function preAddCurrentTextbox() {
    preDialogueCurrent++;
    if (preDialogueStrings[preDialogueCurrent] === undefined) {
        preDialogueStrings[preDialogueCurrent] = "";
    }
    else {
        preDialogueStrings.splice(preDialogueCurrent, 0, "");
    }
    prebox.value = preDialogueStrings[preDialogueCurrent];
    preboxrender.innerText = (prebox.value !== "") ? prebox.value : "This is some placeholder text! You can change it!";
    console.log(preDialogueCurrent);
    if (preDialogueCurrent >= 0) {
        document.getElementById("prePreviousButton").style.opacity = "100%";
    }
    document.getElementById("preCurrentAmountDialogue").innerText = preDialogueStrings.length.toString();
    document.getElementById("preCurrentDialoge").innerText = (preDialogueCurrent + 1).toString();
} //merge with the Next functionality
//Array of all current properties
const propertyList = [];
const uniqueTypes = ["Armor", "Part"];
const typesWithLimit = ["Thrust", "Fuel", "Command", "Passenger", "Radar", "Cargo", "Firepower", "Energy", "Comms", "Maneuverability", "Fleet", "T2M", "Mass", "Landing", "Power", "Range"];
const typesWithoutLimit = ["Compact", "CompactX", "CompactY", "ImportTax", "CrewPartsConnected", "Cloack", "HotSpace"];
let usableTypeList = [];
typesWithLimit.forEach(element => {
    usableTypeList.push(element);
});
uniqueTypes.forEach(element => {
    usableTypeList.push(element);
});
typesWithoutLimit.forEach(element => {
    usableTypeList.push(element);
});
//Make it smarter than this, so its categorised in groups that can use other parameters.
//const usableTypeList = ["Thrust", "Fuel", "Command", "Passenger", "Radar", "Cargo", "Firepower", "Energy", "Comms", "Maneuverability", "Fleet", "T2M", "Mass", "Landing", "Power", "Range", "Armor", "Part", "Compact", "CompactX", "CompactY", "ImportTax", "CrewPartsConnected", "Cloack", "HotSpace"];
const directionList = ["top", "bottom", "front", "rear"];
const modeList = ["min", "max"];
const partTypeList = (async () => {
    const data = await retrieveAllObjects();
    return data;
})();
const unusableTypeList = ["Size", "Overlap", "Heat", "AttachedParts", "PositiveEnergy", "Hazard", "AllPartsFueled", "Profitable", "Radiation"]; //These don't do anything or are already standardly used, doen't crash the game though. //Instead of hazard, create obstruction? view windows that can be obsctructed, but the half that is doesn't count.
//}
//}
//The set variables for one (with checks verifying these)
let currentRequirementSelection;
let currentRequiredPartSelection;
let currentDirectionSelection;
//if type from *LIST*, also check for these properties, else, disregard them as they are optional in that regard.
var newRequirements = {};
// newRequirements.type; //##This displays different on Directions or Part Types, so create custom names, like as in the json?
// newRequirements.direction;
// newRequirements.mode = modeList[0];
// newRequirements.partType;
// newRequirements.limit = 0;
//Green if valid? Red delete? What do I want with the colouring?
//Image be item/requirement preview??
async function addRequirementExecutor() {
    if (newRequirements.type === "Part") {
        Object.keys(newRequirements).forEach(function (itm) {
            if (itm != "type" && itm != "mode" && itm != "partType" && itm != "limit")
                delete newRequirements[itm];
        });
    }
    else if (newRequirements.type === "Armor") {
        Object.keys(newRequirements).forEach(function (itm) {
            if (itm != "type" && itm != "direction")
                delete newRequirements[itm];
        });
    }
    else if (newRequirements.type === undefined) {
        Object.keys(newRequirements).forEach(function (itm) {
            delete newRequirements[itm];
            console.log("##Fix invalid statements##");
        });
    }
    else {
        Object.keys(newRequirements).forEach(function (itm) {
            if (itm != "type" && itm != "limit")
                delete newRequirements[itm];
        });
    }
    ;
    // console.log("##")
    // console.log(currentRequirementSelection);
    // console.log(usableTypeList[currentRequirementSelection]);
    // console.log("--")
    // console.log((await newRequirements));
    // console.log((await newRequirements.type));
    // console.log("##");
    // console.log("-StoreInArray-");
    // console.log((newRequirements));
    // console.log(JSON.stringify((newRequirements)).replace("{","(").replace("}",")").replace(/"([^"]+)":/g, '$1:'));
    propertyListUsedInGame.push((JSON.stringify((newRequirements)).replace("{", "(").replace("}", ")").replace(/"([^"]+)":/g, '$1:')));
    // console.log(propertyListUsedInGame);
    propertyList.push((JSON.stringify((newRequirements)).replace("{", "(").replace("}", ")")));
    console.log(propertyList);
    const arrayOfAllRequirements = (i) => { return JSON.parse(propertyList[i].replace("(", "{").replace(")", "}")); };
    // console.log(propertyList.length)
    // console.log("-StoreInArray-")
    document.getElementById("requirementsList").innerHTML = "";
    for (let i = 0; i < propertyList.length; i++) {
        const requirementTitle = document.createElement("span");
        requirementTitle.setAttribute("style", "text-align: left; display: inline-block; width: 250px; position: relative; top:-4px; text-transform: capitalize;");
        if (await arrayOfAllRequirements(i).type === "Part") {
            requirementTitle.innerText = (await arrayOfAllRequirements(i).partType).replaceAll("_", " ");
        }
        else if (await arrayOfAllRequirements(i).direction !== undefined) {
            requirementTitle.innerText = (await arrayOfAllRequirements(i).type) + " " + (await arrayOfAllRequirements(i).direction);
        }
        else {
            requirementTitle.innerText = (await arrayOfAllRequirements(i).type);
        }
        ;
        console.log(i);
        console.log(await arrayOfAllRequirements(i).type);
        //In theory these >= <= should be conditionally appearing, not hardcoded into the line.
        //get rid of all these else if's omfg
        let displayedValue = await arrayOfAllRequirements(i).limit;
        if (await arrayOfAllRequirements(i).mode === "min") {
            displayedValue = (">= " + await arrayOfAllRequirements(i).limit);
        }
        else if (await arrayOfAllRequirements(i).mode === "max") {
            displayedValue = ("<= " + await arrayOfAllRequirements(i).limit);
        }
        else if (await arrayOfAllRequirements(i).limit !== undefined) {
            displayedValue = (await arrayOfAllRequirements(i).limit);
        }
        else {
            displayedValue = "";
        }
        ;
        const requirementProcess = document.createElement("span");
        requirementProcess.setAttribute("style", "text-align: left; display: inline-block; width: 180px; position: relative; top:-4px; left: 8px; text-transform: capitalize;");
        requirementProcess.innerText = "| " + String(displayedValue);
        const requirementLimit = document.createElement("span");
        requirementLimit.setAttribute("style", "text-align: right; display: inline-block; width: 80px; position: relative; top:-4px; left: 0px; text-transform: capitalize;");
        requirementLimit.innerText = "";
        requirementLimit.innerHTML = requirementLimit.innerHTML + `‎ <img src="ScriptGenerator/MissionGenerator/XMark.png" id="removeRequirement" style="position: relative; scale: 250%; image-rendering: pixelated; top: -3px; left: 8px;">`;
        const requirement = document.createElement("ul");
        requirement.setAttribute("style", "padding: 0; margin: 0; position: relative; top: -27px; left: 0px; display: block; color: rgb(249, 81, 146); width: 527px; background-color: rgb(36, 9, 51); margin-bottom: 5px; max-height: 25px;");
        requirement.append(requirementTitle, requirementProcess, requirementLimit);
        document.getElementById("requirementsList").append(requirement);
        //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
    newRequirements = {};
    document.getElementById("currentRequirementSelection").innerText = "[Not Selected] ";
    document.getElementById("currentRequiredPartSelection").innerText = "[Not Selected] ";
    document.getElementById("currentDirectionSelection").innerText = "[Not Selected] ";
    document.getElementById("modeMinimum").innerText = "Min";
    document.getElementById("modeMaximum").innerText = "Max";
    document.getElementById("limitValueBox").value = '';
    document.getElementById("customValueBox").value = '';
    document.getElementById("required-part-element").style.visibility = "hidden";
    document.getElementById("mode-element").style.visibility = "hidden";
    document.getElementById("direction-element").style.visibility = "hidden";
    document.getElementById("value-element").style.visibility = "hidden";
    document.getElementById("custom-parameter-element").style.visibility = "hidden";
}
//##
//#  Dropdown system for requirements
//##
function requirementDropdown() {
    for (let i = 0; i < usableTypeList.length; i++) {
        const current = document.getElementsByClassName("requirementclass")[i].style.display;
        const expr = current;
        switch (expr) {
            case 'none':
                document.getElementsByClassName("requirementclass")[i].style.display = "block";
                document.getElementById("currentRequirementSelectionDirection").innerText = "↑";
                document.getElementById("requirementTypeList").style.height = "100px";
                break;
            case 'block':
                document.getElementsByClassName("requirementclass")[i].style.display = "none";
                document.getElementById("currentRequirementSelectionDirection").innerText = "↓";
                document.getElementById("requirementTypeList").style.height = "0px";
                break;
        }
    }
}
;
function GenerateRequirementList() {
    document.getElementById("requirementTypeList").innerHTML = "";
    for (let i = 0; i < usableTypeList.length; i++) {
        const requirementTypeList = document.createElement("li");
        requirementTypeList.setAttribute("class", "interactible requirementclass requirementTypeListID");
        requirementTypeList.setAttribute("style", "display: none;");
        requirementTypeList.setAttribute("tabindex", "0");
        requirementTypeList.innerText = usableTypeList[i];
        //console.log(usableTypeList[i]);
        document.getElementById("requirementTypeList").append(requirementTypeList);
        //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
}
GenerateRequirementList();
async function storeRequirementSelection(i) {
    if (usableTypeList[i] === "Part") {
        document.getElementById("direction-element").style.visibility = "hidden";
        document.getElementById("value-element").style.visibility = "visible";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "visible";
        document.getElementById("required-part-element").style.visibility = "visible";
    }
    else if (usableTypeList[i] !== "Armor") {
        document.getElementById("required-part-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "hidden";
        document.getElementById("direction-element").style.visibility = "hidden";
        document.getElementById("value-element").style.visibility = "visible";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
    }
    ;
    if (usableTypeList[i] === "Armor") {
        document.getElementById("direction-element").style.visibility = "visible";
        document.getElementById("value-element").style.visibility = "hidden";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "visible";
        document.getElementById("required-part-element").style.visibility = "hidden";
    }
    else if (usableTypeList[i] !== "Part") {
        document.getElementById("required-part-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "visible";
        document.getElementById("direction-element").style.visibility = "hidden";
        document.getElementById("value-element").style.visibility = "visible";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
    }
    ;
    if (typesWithLimit.indexOf(usableTypeList[i]) !== -1) {
        document.getElementById("required-part-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "visible";
        document.getElementById("direction-element").style.visibility = "hidden";
        document.getElementById("value-element").style.visibility = "visible";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
    }
    else if (typesWithoutLimit.indexOf(usableTypeList[i]) !== -1) {
        document.getElementById("required-part-element").style.visibility = "hidden";
        document.getElementById("mode-element").style.visibility = "hidden";
        document.getElementById("direction-element").style.visibility = "hidden";
        document.getElementById("value-element").style.visibility = "hidden";
        document.getElementById("custom-parameter-element").style.visibility = "hidden";
    }
    ;
    currentRequirementSelection = i;
    newRequirements.type = await usableTypeList[currentRequirementSelection];
    const currentSelectionAsText = usableTypeList[i];
    console.log(currentRequirementSelection + currentSelectionAsText);
    document.getElementById("currentRequirementSelection").innerText = currentSelectionAsText;
}
;
for (let i = 0; i < usableTypeList.length; i++) {
    document.getElementsByClassName("requirementTypeListID")[i].addEventListener("mousedown", storeRequirementSelection.bind(this, i));
}
//##
//#  
//##
//##
//#  Dropdown system for required parts
//##
async function requiredPartDropdown() {
    for (let i = 0; i < (await partTypeList).length; i++) {
        const current = document.getElementsByClassName("requiredPartclass")[i].style.display;
        const expr = current;
        switch (expr) {
            case 'none':
                document.getElementsByClassName("requiredPartclass")[i].style.display = "block";
                document.getElementById("currentRequiredPartSelectionDirection").innerText = "↑";
                document.getElementById("requiredPartTypeList").style.height = "100px";
                break;
            case 'block':
                document.getElementsByClassName("requiredPartclass")[i].style.display = "none";
                document.getElementById("currentRequiredPartSelectionDirection").innerText = "↓";
                document.getElementById("requiredPartTypeList").style.height = "0px";
                break;
        }
    }
}
;
async function GenerateRequiredPartList() {
    document.getElementById("requiredPartTypeList").innerHTML = "";
    for (let i = 0; i < (await partTypeList).length; i++) {
        const requiredPartTypeList = document.createElement("li");
        requiredPartTypeList.setAttribute("class", "interactible requiredPartclass requiredPartTypeListID");
        requiredPartTypeList.setAttribute("style", "display: none;");
        requiredPartTypeList.innerText = (await partTypeList)[i];
        //console.log(partTypeList[i]);
        document.getElementById("requiredPartTypeList").append(requiredPartTypeList);
        //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
}
GenerateRequiredPartList();
async function storeRequiredPartSelection(i) {
    currentRequiredPartSelection = i;
    newRequirements.partType = (await partTypeList)[currentRequiredPartSelection];
    const currentSelectionAsText = (await partTypeList)[i];
    console.log(currentRequiredPartSelection + currentSelectionAsText);
    document.getElementById("currentRequiredPartSelection").innerText = currentSelectionAsText;
}
;
async function addEventlisteners() {
    const generationLength = (await partTypeList);
    for (let i = 0; i < await generationLength.length; i++) {
        document.getElementsByClassName("requiredPartTypeListID")[await i].addEventListener("mousedown", storeRequiredPartSelection.bind(this, i));
    }
}
addEventlisteners();
//##
//#  
//##
//##
//#  Direction system
//##
function DirectionDropdown() {
    for (let i = 0; i < directionList.length; i++) {
        const current = document.getElementsByClassName("directionclass")[i].style.display;
        const expr = current;
        switch (expr) {
            case 'none':
                document.getElementsByClassName("directionclass")[i].style.display = "block";
                document.getElementById("currentDirectionSelectionDirection").innerText = "↑";
                document.getElementById("directionList").style.height = "100px";
                break;
            case 'block':
                document.getElementsByClassName("directionclass")[i].style.display = "none";
                document.getElementById("currentDirectionSelectionDirection").innerText = "↓";
                document.getElementById("directionList").style.height = "0px";
                break;
        }
    }
}
;
function GenerateDirectionList() {
    document.getElementById("directionList").innerHTML = "";
    for (let i = 0; i < directionList.length; i++) {
        const directionListElement = document.createElement("li");
        directionListElement.setAttribute("class", "interactible directionclass directionListID");
        directionListElement.setAttribute("style", "display: none;");
        directionListElement.innerText = directionList[i];
        //console.log(partTypeList[i]);
        document.getElementById("directionList").append(directionListElement);
        //instead of making it appear in list from whats given, eventually make list generate from array of existing ones so it, you know, works better.
    }
}
GenerateDirectionList();
async function storeDirectionSelection(i) {
    currentDirectionSelection = i;
    const currentSelectionAsText = directionList[i];
    newRequirements.direction = await directionList[i];
    document.getElementById("currentDirectionSelection").innerText = currentSelectionAsText;
}
;
for (let i = 0; i < directionList.length; i++) {
    document.getElementsByClassName("directionListID")[i].addEventListener("mousedown", storeDirectionSelection.bind(this, i));
}
;
//##
//#  
//##
//make this visual, but not like this ffs
//also have these buttons appear on what's in the json, not this messy whatever
function selectMinimum() {
    newRequirements.mode = modeList[0];
    document.getElementById("modeMinimum").innerText = "[Min]";
    document.getElementById("modeMaximum").innerText = "Max";
}
function selectMaximum() {
    newRequirements.mode = modeList[1];
    document.getElementById("modeMinimum").innerText = "Min";
    document.getElementById("modeMaximum").innerText = "[Max]";
}
function limitValueRetrieve() {
    setTimeout(function () {
        console.log(document.getElementById("limitValueBox").value);
        newRequirements.limit = document.getElementById("limitValueBox").value;
    }, 1);
}
function rewardValueRetrieve() {
    setTimeout(function () {
        console.log(document.getElementById("rewardValueBox").value);
        rewardValue = Number(document.getElementById("rewardValueBox").value);
        document.getElementById("previewContractCost").innerText = rewardValue.toLocaleString();
    }, 1);
}
async function retrieveAllObjects() {
    let objectList = async () => {
        const vanillaObjectList = await fetch("ScriptGenerator/MissionGenerator/objects.json");
        let cool = await vanillaObjectList.json();
        const arrayOfObjects = [];
        for (let i = 0; i < Object.keys(cool).length; i++) {
            let pushme = Object.keys(cool)[i];
            //console.log(pushme)
            arrayOfObjects.push(pushme);
        }
        //console.log(arrayOfObjects)
        return arrayOfObjects;
    };
    const arrayOfObjects = await objectList();
    console.log(arrayOfObjects);
    return arrayOfObjects;
}
;
function uniqueSwitch() {
    if (uniqueState !== !0) { //true
        uniqueState = !0;
        document.getElementById("isItUnique").innerText = "[✓]";
    }
    else { //false
        uniqueState = !1;
        document.getElementById("isItUnique").innerText = "[X]";
    }
    ;
}
;
function removeClickedRequirement() {
    //This needs to remove from list and display
}
;
///Needs cleanup with, for example, the mother function that starts it all.
function contractEditorMO() {
}
function preLoading() {
}
function eventListeners() {
    document.getElementById("playpause").addEventListener("click", musicPlayPause);
    document.getElementById("songright").addEventListener("click", musicSwapcheckforward);
    document.getElementById("songleft").addEventListener("click", musicSwapcheckbackward);
    document.getElementById("clientright").addEventListener("click", clientSwapForward);
    document.getElementById("clientleft").addEventListener("click", clientSwapBackward);
    document.getElementById("contractname").addEventListener("input", pog);
    document.getElementById("prebox").addEventListener("input", pog2);
    document.getElementById("postbox").addEventListener("input", pog3);
    for (let i = 0; i < document.getElementsByClassName("ui-button").length; i++) {
        document.getElementsByClassName("ui-button")[i].addEventListener("click", selectbutton);
    }
    ;
    document.getElementById("copyquery").addEventListener("click", exportQuery);
    document.getElementById("preNextButton").addEventListener("click", preNextButton);
    document.getElementById("prePreviousButton").addEventListener("click", prePreviousButton);
    document.getElementById("preRemoveTextbox").addEventListener("click", preRemoveCurrentTextbox);
    document.getElementById("preAddTextbox").addEventListener("click", preAddCurrentTextbox);
    document.getElementById("addRequirement").addEventListener("click", addRequirementExecutor);
    document.getElementById("requirement-dropdown").addEventListener("click", requirementDropdown);
    document.getElementById("required-part-dropdown").addEventListener("click", requiredPartDropdown);
    document.getElementById("direction-dropdown").addEventListener("click", DirectionDropdown);
    document.getElementById("modeMinimum").addEventListener("click", selectMinimum);
    document.getElementById("modeMaximum").addEventListener("click", selectMaximum);
    document.getElementById("limitValueBox").addEventListener("change", limitValueRetrieve);
    document.getElementById("rewardValueBox").addEventListener("change", rewardValueRetrieve);
    document.getElementById("isItUnique").addEventListener("click", uniqueSwitch);
    document.getElementById("removeRequirement").addEventListener("click", removeClickedRequirement);
}
eventListeners();
